// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole               @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?                @db.ObjectId

  homePage HomePage?
  contacts Contact[]
  Projects Project[]
  skills   Skill[]
  Category Category[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model HomePage {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  position    String?
  description String?
  image       String?

  resume   Resume?
  resumeId String? @db.ObjectId

  User   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Resume {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  url  String?

  HomePage   HomePage? @relation(fields: [homePageId], references: [id], onDelete: Cascade)
  homePageId String    @unique @db.ObjectId
}

model Contact {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  icon String
  url  String

  User   User?  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Project {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  projectUrl  String
  githubUrl   String

  User   User?  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Skill {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  image    String
  name     String
  category Category @relation(fields: [categoryId], references: [id])

  User       User?  @relation(fields: [userId], references: [id])
  userId     String @db.ObjectId
  categoryId String @db.ObjectId
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  skills Skill[]

  User   User?  @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}
